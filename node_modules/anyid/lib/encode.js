"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_x_1 = __importDefault(require("base-x"));
const _ = __importStar(require("lodash"));
function createCharset(s) {
    const groups = s.match(/^([Aa0]+)([\+-][^\+-]+)?([\+-][^\+-]+)?$/);
    if (!groups) {
        throw new Error(`Invalid encode parameter "${s}"`);
    }
    let chars = '';
    for (const t of groups[1]) {
        switch (t) {
            case '0':
                chars += '0123456789';
                break;
            case 'A':
                chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                break;
            case 'a':
                chars += 'abcdefghijklmnopqrstuvwxyz';
                break;
            default:
                throw new Error(`Invalid encoding type "${t}" in "${s}"`);
        }
    }
    for (let i = 2; i < groups.length; i++) {
        const g = groups[i];
        if (g && g[0] === '-') {
            for (const c of _.tail(g)) {
                chars = chars.split(c).join('');
            }
        }
        if (g && g[0] === '+') {
            for (const c of _.tail(g)) {
                chars += c;
            }
        }
    }
    return _.uniq(chars).join('');
}
exports.createCharset = createCharset;
function codec(charset) {
    const chars = createCharset(charset);
    const anyBase = base_x_1.default(chars);
    anyBase.bytesForLength = (n) => Math.ceil(Math.log2(chars.length) * n / 8);
    anyBase.padChar = () => chars[0];
    return anyBase;
}
exports.codec = codec;
//# sourceMappingURL=encode.js.map