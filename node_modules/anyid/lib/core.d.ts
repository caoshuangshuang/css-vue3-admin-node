/// <reference types="node" />
export declare type IdArg = number | Buffer | {
    [name: string]: any;
};
export declare abstract class Value {
    protected owner: AnyId;
    private _bits;
    constructor(owner: AnyId);
    abstract value(arg?: IdArg): Buffer;
    bits: number | undefined;
    protected returnValue(v: number | Buffer): Buffer;
}
export declare class AnyId {
    static use(mixin: any): void;
    private _parent;
    private _codec;
    private _length;
    private _sections;
    private _values;
    private _bits;
    private readonly codec;
    id(arg?: IdArg): string;
    section(anyid: AnyId): AnyId;
    delimiter(d: string): AnyId;
    encode(charset: string): AnyId;
    length(n: number): AnyId;
    bits(n: number): AnyId;
    addValue(value: Value): void;
    lastValue(): Value | undefined;
    findValueByType(type: string): Value | undefined;
    sectionBitLength(): number | undefined;
    private hasSection;
    private hasValue;
}
